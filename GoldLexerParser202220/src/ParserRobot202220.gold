using gold.**

toSet(C) :=  {x|  x in C}




function createAutomaton():IAutomaton begin

	
	Q:={"I","END", "ERR","VARS", "BEGIN", "WALK","WALKI", "WALKIN" ,"WALKINX","WALKTO","VEER", "LOOK","DROP"}

Σ:={'P','m','N','r','w','l','v','V','j','J','B','d','g','G','f','C','A','b',',','(',')','=',';','{','}','#','1','2','3','4','5','6','7','8'}
q₀:=("I")
F:={"END"}
Δ:=⟦⟦"I",'P',"BEGIN"⟧,
 ⟦"I",'b',"END"⟧,
    ⟦"I",'m',"ERR"⟧,
     ⟦"I",'N',"ERR"⟧,
      ⟦"I",'r',"ERR"⟧,
       ⟦"I",'w',"ERR"⟧,
        ⟦"I",'l',"ERR"⟧,
         ⟦"I",'v',"ERR"⟧,
          ⟦"I",'V',"ERR"⟧,
           ⟦"I",'j',"ERR"⟧,
            ⟦"I",'J',"ERR"⟧,
             ⟦"I",'B',"ERR"⟧,
              ⟦"I",'d',"ERR"⟧,
               ⟦"I",'g',"ERR"⟧,
                ⟦"I",'G',"ERR"⟧,
                 ⟦"I",'f',"ERR"⟧,
                  ⟦"I",'p',"ERR"⟧,
                   ⟦"I",'C',"ERR"⟧,
                    ⟦"I",'A',"ERR"⟧,
                     ⟦"I",'b',"BEGIN"⟧,
                     ⟦"I",'#',"ERR"⟧,
                    
                       
//VAR 
 ⟦"VARS",'P',"BEGIN"⟧,
 ⟦"VARS",'C',"END"⟧,
 
      ⟦"VARS",'w',"ERR"⟧,
       ⟦"VARS",'l',"ERR"⟧,
        ⟦"VARS",'v',"VARS"⟧,
          ⟦"VARS",'V',"VARS"⟧,
           ⟦"VARS",'j',"ERR"⟧,
            ⟦"VARS",'J',"ERR"⟧,
             ⟦"VARS",'B',"ERR"⟧,
              ⟦"VARS",'d',"ERR"⟧,
               ⟦"VARS",'g',"ERR"⟧,
                ⟦"VARS",'G',"ERR"⟧,
                 ⟦"VARS",'f',"ERR"⟧,
                  ⟦"VARS",'m',"ERR"⟧,
                   ⟦"VARS",'A',"VARS"⟧,
                    ⟦"VARS",'b',"ERR"⟧,
                     ⟦"VARS",'c',"ERR"⟧,
                      ⟦"VARS",',',"VARS"⟧,
                       ⟦"VARS",';',"VARS"⟧,
                        ⟦"VARS",'1',"ERR"⟧,
                           ⟦"VARS",'2',"ERR"⟧,
                           ⟦"VARS",'3',"ERR"⟧,
                           ⟦"VARS",'4',"ERR"⟧,
                           ⟦"VARS",'5',"ERR"⟧,
                           ⟦"VARS",'6',"ERR"⟧,
                           ⟦"VARS",'7',"ERR"⟧,
                           ⟦"VARS",'8',"ERR"⟧,
 //BEGIN                    
   ⟦"BEGIN",'P',"ERR"⟧,
    ⟦"BEGIN",'C',"END"⟧,
     ⟦"BEGIN",'w',"WALK"⟧,
        ⟦"BEGIN",'l',"LOOK"⟧,
         ⟦"BEGIN",'v',"ERR"⟧,
          ⟦"BEGIN",'V',"ERR"⟧,
           ⟦"BEGIN",'j',"JUMP"⟧,
            ⟦"BEGIN",'J',"jUMPTO"⟧,
             ⟦"BEGIN",'B',"VEER"⟧,
              ⟦"BEGIN",'d',"DROP"⟧,
               ⟦"BEGIN",'g',"GRAB"⟧,
                ⟦"BEGIN",'G',"GET"⟧,
                 ⟦"BEGIN",'f',"FREE"⟧,
                  ⟦"BEGIN",'A',"VARS"⟧,
                  ⟦"BEGIN",'m',"POP"⟧,
                  ⟦"BEGIN",'b',"PROC"⟧,
                   ⟦"BEGIN",'1',"ERR"⟧,
                           ⟦"BEGIN",'2',"ERR"⟧,
                           ⟦"BEGIN",'3',"ERR"⟧,
                           ⟦"BEGIN",'4',"ERR"⟧,
                           ⟦"BEGIN",'5',"ERR"⟧,
                           ⟦"BEGIN",'6',"ERR"⟧,
                           ⟦"BEGIN",'7',"ERR"⟧,
                           ⟦"BEGIN",'8',"ERR"⟧,
                   
 
                       
 //walk
  ⟦"WALK",'P',"ERR"⟧,
  ⟦"WALK",'C',"ERR"⟧,
  ⟦"WALK",'w',"ERR"⟧,
  ⟦"WALK",'l',"ERR"⟧,
  ⟦"WALK",'v',"ERR"⟧,
   ⟦"WALK",'V',"ERR"⟧,
  ⟦"WALK",'(',"WALKI"⟧,
  ⟦"WALK",'J',"ERR"⟧,
  ⟦"WALK",'j',"ERR"⟧,
  ⟦"WALK",'B',"ERR"⟧,
  ⟦"WALK",'d',"ERR"⟧,
  ⟦"WALK",'g',"ERR"⟧,
  ⟦"WALK",'G',"ERR"⟧,
  ⟦"WALK",'f',"ERR"⟧,
  ⟦"WALK",'A',"ERR"⟧,
  ⟦"WALK",'b',"ERR"⟧,
   ⟦"WALK",'1',"ERR"⟧,
  ⟦"WALK",'2',"ERR"⟧,
  ⟦"WALK",'3',"ERR"⟧,
  ⟦"WALK",'4',"ERR"⟧,
  ⟦"WALK",'5',"ERR"⟧,
  ⟦"WALK",'6',"ERR"⟧,
  ⟦"WALK",'7',"ERR"⟧,
  ⟦"WALK",'8',"ERR"⟧,
 
 
  ⟦"WALKI",'P',"ERR"⟧,
  ⟦"WALKI",'#',"WALKIN"⟧,
   ⟦"WALKI",'P',"ERR"⟧,
  ⟦"WALKI",'C',"END"⟧,
  ⟦"WALKI",'w',"ERR"⟧,
  ⟦"WALKI",'l',"ERR"⟧,
  ⟦"WALKI",'v',"WALKIN"⟧,
  ⟦"WALKI",'V',"WALKIN"⟧,
   ⟦"WALKI",'J',"ERR"⟧,
  ⟦"WALKI",'j',"ERR"⟧,
  ⟦"WALKI",'B',"ERR"⟧,
  ⟦"WALKI",'d',"ERR"⟧,
  ⟦"WALKI",'g',"ERR"⟧,
  ⟦"WALKI",'G',"ERR"⟧,
  ⟦"WALKI",'f',"ERR"⟧,
  ⟦"WALKI",'A',"ERR"⟧,
  ⟦"WALKI",'b',"ERR"⟧,
  ⟦"WALKI",'1',"WALKTO"⟧,
  ⟦"WALKI",'2',"WALKTO"⟧,
  ⟦"WALKI",'3',"WALKTO"⟧,
  ⟦"WALKI",'4',"WALKTO"⟧,
  ⟦"WALKI",'5',"WALKTO"⟧,
  ⟦"WALKI",'6',"WALKTO"⟧,
  ⟦"WALKI",'7',"WALKTO"⟧,
  ⟦"WALKI",'8',"WALKTO"⟧,
  
  
   ⟦"WALKIN",'p',"ERR"⟧,
  ⟦"WALKIN",'C',"ERR"⟧,
  ⟦"WALKIN",'w',"ERR"⟧,
  ⟦"WALKIN",'l',"ERR"⟧,
  ⟦"WALKIN",'v',"ERR"⟧,
  ⟦"WALKIN",'V',"ERR"⟧,
   ⟦"WALKIN",'J',"ERR"⟧,
  ⟦"WALKIN",'j',"ERR"⟧,
  ⟦"WALKIN",'B',"ERR"⟧,
  ⟦"WALKIN",'d',"ERR"⟧,
  ⟦"WALKIN",'g',"ERR"⟧,
  ⟦"WALKIN",'G',"ERR"⟧,
  ⟦"WALKIN",'f',"ERR"⟧,
  ⟦"WALKIN",'A',"ERR"⟧,
  ⟦"WALKIN",'b',"ERR"⟧,
  ⟦"WALKIN",'1',"ERR"⟧,
  ⟦"WALKIN",'2',"ERR"⟧,
  ⟦"WALKIN",'3',"ERR"⟧,
  ⟦"WALKIN",'4',"ERR"⟧,
  ⟦"WALKIN",'5',"ERR"⟧,
  ⟦"WALKIN",'6',"ERR"⟧,
  ⟦"WALKIN",'7',"ERR"⟧,
  ⟦"WALKIN",'8',"ERR"⟧,
   ⟦"WALKIN",')',"WALKINX"⟧,
  
  
 
    ⟦"WALKTO",'p',"ERR"⟧,
  ⟦"WALKTO",'C',"ERR"⟧,
  ⟦"WALKTO",'w',"ERR"⟧,
  ⟦"WALKTO",'l',"ERR"⟧,
  ⟦"WALKTO",'v',"WALKTO"⟧,
   ⟦"WALKTO",'V',"WALKTO"⟧,
   ⟦"WALKTO",'#',"WALKTO"⟧,
   ⟦"WALKTO",'J',"ERR"⟧,
  ⟦"WALKTO",'j',"ERR"⟧,
  ⟦"WALKTO",'B',"ERR"⟧,
  ⟦"WALKTO",'d',"ERR"⟧,
  ⟦"WALKTO",'g',"ERR"⟧,
  ⟦"WALKTO",'G',"ERR"⟧,
  ⟦"WALKTO",'f',"ERR"⟧,
  ⟦"WALKTO",'A',"ERR"⟧,
  ⟦"WALKTO",'b',"ERR"⟧,
   ⟦"WALKTO",'b',"ERR"⟧,
  ⟦"WALKTO",'1',"WALKTO"⟧,
  ⟦"WALKTO",'2',"WALKTO"⟧,
  ⟦"WALKTO",'3',"WALKTO"⟧,
  ⟦"WALKTO",'4',"WALKTO"⟧,
  ⟦"WALKTO",'5',"WALKTO"⟧,
  ⟦"WALKTO",'6',"WALKTO"⟧,
  ⟦"WALKTO",'7',"WALKTO"⟧,
  ⟦"WALKTO",'8',"WALKTO"⟧,
  ⟦"WALKTO",',',"WALKTO"⟧,
  ⟦"WALKTO",')',"WALKINX"⟧,
  
    ⟦"WALKINX",'p',"ERR"⟧,
  ⟦"WALKINX",'C',"ERR"⟧,
  ⟦"WALKINX",'w',"ERR"⟧,
  ⟦"WALKINX",'l',"ERR"⟧,
  ⟦"WALKINX",'v',"ERR"⟧,
   ⟦"WALKINX",'V',"ERR"⟧,
   ⟦"WALKINX",'#',"ERR"⟧,
   ⟦"WALKINX",'J',"ERR"⟧,
  ⟦"WALKINX",'j',"ERR"⟧,
  ⟦"WALKINX",'B',"ERR"⟧,
  ⟦"WALKINX",'d',"ERR"⟧,
  ⟦"WALKINX",'g',"ERR"⟧,
  ⟦"WALKINX",'G',"ERR"⟧,
  ⟦"WALKINX",'f',"ERR"⟧,
  ⟦"WALKINX",'A',"ERR"⟧,
  ⟦"WALKINX",'b',"ERR"⟧,
   ⟦"WALKINX",'b',"ERR"⟧,
  ⟦"WALKINX",'1',"ERR"⟧,
  ⟦"WALKINX",'2',"ERR"⟧,
  ⟦"WALKINX",'3',"ERR"⟧,
  ⟦"WALKINX",'4',"ERR"⟧,
  ⟦"WALKINX",'5',"ERR"⟧,
  ⟦"WALKINX",'6',"ERR"⟧,
  ⟦"WALKINX",'7',"ERR"⟧,
  ⟦"WALKINX",'8',"ERR"⟧,
  ⟦"WALKINX",';',"BEGIN"⟧,
 
 
 
  //veer
 
    ⟦"VEER",'p',"ERR"⟧,
  ⟦"VEER",'C',"ERR"⟧,
  ⟦"VEER",'w',"ERR"⟧,
  ⟦"VEER",'l',"ERR"⟧,
  ⟦"VEER",'v',"ERR"⟧,
   ⟦"VEER",'V',"ERR"⟧,
   ⟦"VEER",'#',"ERR"⟧,
   ⟦"VEER",'J',"ERR"⟧,
  ⟦"VEER",'j',"ERR"⟧,
  ⟦"VEER",'B',"ERR"⟧,
  ⟦"VEER",'d',"ERR"⟧,
  ⟦"VEER",'g',"ERR"⟧,
  ⟦"VEER",'G',"ERR"⟧,
  ⟦"VEER",'f',"ERR"⟧,
  ⟦"VEER",'A',"ERR"⟧,
  ⟦"VEER",'b',"ERR"⟧,
   ⟦"VEER",'b',"ERR"⟧,
  ⟦"VEER",'1',"VEER"⟧,
  ⟦"VEER",'2',"VEER"⟧,
  ⟦"VEER",'3',"ERR"⟧,
  ⟦"VEER",'4',"ERR"⟧,
  ⟦"VEER",'5',"ERR"⟧,
  ⟦"VEER",'6',"ERR"⟧,
  ⟦"VEER",'7',"ERR"⟧,
  ⟦"VEER",'8',"ERR"⟧,
  ⟦"VEER",';',"BEGIN"⟧,
  ⟦"VEER",'(',"VEER"⟧,
  ⟦"VEER",')',"VEER"⟧,


//look
   ⟦"LOOK",'p',"ERR"⟧,
  ⟦"LOOK",'C',"ERR"⟧,
  ⟦"LOOK",'w',"ERR"⟧,
  ⟦"LOOK",'l',"ERR"⟧,
  ⟦"LOOK",'v',"ERR"⟧,
   ⟦"LOOK",'V',"ERR"⟧,
   ⟦"LOOK",'#',"ERR"⟧,
   ⟦"LOOK",'J',"ERR"⟧,
  ⟦"LOOK",'j',"ERR"⟧,
  ⟦"LOOK",'B',"ERR"⟧,
  ⟦"LOOK",'d',"ERR"⟧,
  ⟦"LOOK",'g',"ERR"⟧,
  ⟦"LOOK",'G',"ERR"⟧,
  ⟦"LOOK",'f',"ERR"⟧,
  ⟦"LOOK",'A',"ERR"⟧,
  ⟦"LOOK",'b',"ERR"⟧,
   ⟦"LOOK",'b',"ERR"⟧,
  ⟦"LOOK",'1',"ERR"⟧,
  ⟦"LOOK",'2',"ERR"⟧,
  ⟦"LOOK",'3',"ERR"⟧,
  ⟦"LOOK",'4',"ERR"⟧,
  ⟦"LOOK",'5',"LOOK"⟧,
  ⟦"LOOK",'6',"LOOK"⟧,
  ⟦"LOOK",'7',"LOOK"⟧,
  ⟦"LOOK",'8',"LOOK"⟧,
  ⟦"LOOK",';',"BEGIN"⟧,
  ⟦"LOOK",'(',"LOOK"⟧,
  ⟦"LOOK",')',"LOOK"⟧,
  //drop
   ⟦"DROP",'p',"ERR"⟧,
  ⟦"DROP",'C',"ERR"⟧,
  ⟦"DROP",'w',"ERR"⟧,
  ⟦"DROP",'l',"ERR"⟧,
  ⟦"DROP",'v',"DROP"⟧,
   ⟦"DROP",'V',"DROP"⟧,
   ⟦"DROP",'#',"DROP"⟧,
   ⟦"DROP",'J',"ERR"⟧,
  ⟦"DROP",'j',"ERR"⟧,
  ⟦"DROP",'B',"ERR"⟧,
  ⟦"DROP",'d',"ERR"⟧,
  ⟦"DROP",'g',"ERR"⟧,
  ⟦"DROP",'G',"ERR"⟧,
  ⟦"DROP",'f',"ERR"⟧,
  ⟦"DROP",'A',"ERR"⟧,
  ⟦"DROP",'b',"ERR"⟧,
   ⟦"DROP",'b',"ERR"⟧,
  ⟦"DROP",'1',"ERR"⟧,
  ⟦"DROP",'2',"ERR"⟧,
  ⟦"DROP",'3',"ERR"⟧,
  ⟦"DROP",'4',"ERR"⟧,
  ⟦"DROP",'5',"ERR"⟧,
  ⟦"DROP",'6',"ERR"⟧,
  ⟦"DROP",'7',"ERR"⟧,
  ⟦"DROP",'8',"ERR"⟧,
  ⟦"DROP",';',"BEGIN"⟧,
  ⟦"DROP",'(',"DROP"⟧,
  ⟦"DROP",')',"DROP"⟧,
 
 
 
  //end
  ⟦"END",'p',"ERR"⟧,
  ⟦"END",'f',"ERR"⟧,
  ⟦"END",'m',"ERR"⟧,
  ⟦"END",'l',"ERR"⟧,
  ⟦"END",'r',"ERR"⟧,
  ⟦"END",'n',"ERR"⟧,
  ⟦"END",'v',"ERR"⟧,
  ⟦"END",'e',"ERR"⟧,
  ⟦"END",'s',"ERR"⟧,
  ⟦"END",'a',"ERR"⟧,
  ⟦"END",'M',"ERR"⟧,
  ⟦"END",'t',"ERR"⟧,
  ⟦"END",'F',"ERR"⟧,
  ⟦"END",'S',"ERR"⟧,
  ⟦"END",'P',"ERR"⟧,
  ⟦"END",'K',"ERR"⟧,
  ⟦"END",'D',"ERR"⟧,
  ⟦"END",'d',"ERR"⟧,
  ⟦"END",'o',"ERR"⟧,
  ⟦"END",'c',"ERR"⟧,
  ⟦"END",'w',"ERR"⟧,
  ⟦"END",'b',"ERR"⟧
 
 
 
 
 
 
 
 
 
 ⟧
	
	
	M:=GNondeterministicAutomaton(Q,Σ,q₀,F,Δ)
	
	return M
end





function createParser(A):IPushdownAutomaton begin
	Q:=(0‥7)
	Σ:=toSet(A)  ∪ {' ', '\n'}
	
	Γ:={'1'}
	q₀:=0
	F:= {0}
	M:=GPushdownAutomaton(Q,Σ,Γ,q₀,F)
SkipChars := {' ', '\n'}   // this will only  be used when testing only the parser as the lexer removes  SkipChars
	
M.delta(0,1,'w').ignore()
M.delta(1,2,'(').ignore()
M.delta(2,7,'#').ignore()
M.delta(2,7,'V').ignore()
M.delta(2,7,'v').ignore()

M.delta(2,3,'r').ignore()
M.delta(3,6,',').ignore()

M.delta(0,4,'k').ignore()

M.delta(4,5,'(').ignore()
M.delta(5,7,'N').ignore()


M.delta(6,7,'#').ignore()
M.delta(6,7,'V').ignore()

M.delta(6,7,'v').ignore()
M.delta(7,0,')').ignore()


 // this will only  be used when testing only the parser as the lexer removes  SkipChars
 
 for each q in Q do
 	for each s in SkipChars do
 	   M.delta(q,q,λ+s).ignore()
 end
 end


return M
end

